{"ast":null,"code":"export const buildBarSeries = (games, records) => {\n  const mappedGames = games.map(game => {\n    const filteredGames = records.filter(item => {\n      return item.gameTitle === game.title && item.gamePlatform === game.platform;\n    });\n    return {\n      x: `${game.title} | ${game.platform}`,\n      y: filteredGames.length\n    };\n  });\n  const sortedGames = mappedGames.sort((a, b) => {\n    return b.y - a.y;\n  });\n  return sortedGames.slice(0, 8);\n};\nexport const getPlatformChartData = records => {\n  const platforms = [\"PC\", \"PLAYSTATION\", \"XBOX\"];\n  const series = platforms.map(platform => {\n    const filtedGames = records.filter(item => {\n      return platform === item.gamePlatform;\n    });\n    return filtedGames.length;\n  });\n  return {\n    labels: platforms,\n    series\n  };\n};\nexport const getGenderChartData = records => {\n  const genderByAmount = records.reduce((accumulator, currentValue) => {\n    if (accumulator[currentValue.genreName] !== undefined) {\n      accumulator[currentValue.genreName] += 1;\n    } else {\n      accumulator[currentValue.genreName] = 1;\n    }\n\n    return accumulator;\n  }, {});\n  const labels = Object.keys(genderByAmount);\n  const series = Object.values(genderByAmount);\n  return {\n    labels,\n    series\n  };\n};","map":{"version":3,"sources":["C:/Users/Avell/Documents/Courses/Nova pasta/front-web/src/pages/Charts/helpers.ts"],"names":["buildBarSeries","games","records","mappedGames","map","game","filteredGames","filter","item","gameTitle","title","gamePlatform","platform","x","y","length","sortedGames","sort","a","b","slice","getPlatformChartData","platforms","series","filtedGames","labels","getGenderChartData","genderByAmount","reduce","accumulator","currentValue","genreName","undefined","Object","keys","values"],"mappings":"AAGA,OAAO,MAAMA,cAAc,GAAG,CAACC,KAAD,EAAgBC,OAAhB,KAA0C;AACtE,QAAMC,WAAW,GAAGF,KAAK,CAACG,GAAN,CAAUC,IAAI,IAAI;AACpC,UAAMC,aAAa,GAAGJ,OAAO,CAACK,MAAR,CAAeC,IAAI,IAAI;AAC3C,aAAOA,IAAI,CAACC,SAAL,KAAmBJ,IAAI,CAACK,KAAxB,IAAiCF,IAAI,CAACG,YAAL,KAAsBN,IAAI,CAACO,QAAnE;AACD,KAFqB,CAAtB;AAIA,WAAO;AACLC,MAAAA,CAAC,EAAG,GAAER,IAAI,CAACK,KAAM,MAAKL,IAAI,CAACO,QAAS,EAD/B;AAELE,MAAAA,CAAC,EAAER,aAAa,CAACS;AAFZ,KAAP;AAKD,GAVmB,CAApB;AAYA,QAAMC,WAAW,GAAGb,WAAW,CAACc,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC7C,WAAOA,CAAC,CAACL,CAAF,GAAMI,CAAC,CAACJ,CAAf;AACD,GAFmB,CAApB;AAIA,SAAOE,WAAW,CAACI,KAAZ,CAAkB,CAAlB,EAAqB,CAArB,CAAP;AACD,CAlBM;AAoBP,OAAO,MAAMC,oBAAoB,GAAInB,OAAD,IAA2B;AAC7D,QAAMoB,SAAS,GAAG,CAAC,IAAD,EAAO,aAAP,EAAsB,MAAtB,CAAlB;AAEA,QAAMC,MAAM,GAAGD,SAAS,CAAClB,GAAV,CAAcQ,QAAQ,IAAI;AACvC,UAAMY,WAAW,GAAGtB,OAAO,CAACK,MAAR,CAAeC,IAAI,IAAI;AACzC,aAAOI,QAAQ,KAAKJ,IAAI,CAACG,YAAzB;AACD,KAFmB,CAApB;AAIA,WAAOa,WAAW,CAACT,MAAnB;AACD,GANc,CAAf;AAQA,SAAO;AACLU,IAAAA,MAAM,EAAEH,SADH;AAELC,IAAAA;AAFK,GAAP;AAID,CAfM;AAiBP,OAAO,MAAMG,kBAAkB,GAAIxB,OAAD,IAA2B;AAC1D,QAAMyB,cAAc,GAAGzB,OAAO,CAAC0B,MAAR,CAAe,CAACC,WAAD,EAAcC,YAAd,KAA+B;AACnE,QAAID,WAAW,CAACC,YAAY,CAACC,SAAd,CAAX,KAAwCC,SAA5C,EAAuD;AACrDH,MAAAA,WAAW,CAACC,YAAY,CAACC,SAAd,CAAX,IAAuC,CAAvC;AACD,KAFD,MAEO;AACNF,MAAAA,WAAW,CAACC,YAAY,CAACC,SAAd,CAAX,GAAsC,CAAtC;AACA;;AAED,WAAOF,WAAP;AACD,GARsB,EAQpB,EARoB,CAAvB;AAUA,QAAMJ,MAAM,GAAGQ,MAAM,CAACC,IAAP,CAAYP,cAAZ,CAAf;AACA,QAAMJ,MAAM,GAAGU,MAAM,CAACE,MAAP,CAAcR,cAAd,CAAf;AAED,SAAO;AACLF,IAAAA,MADK;AAELF,IAAAA;AAFK,GAAP;AAID,CAlBM","sourcesContent":["import { Game } from './types';\r\nimport { RecordItem } from '../Records/types';\r\n\r\nexport const buildBarSeries = (games: Game[], records: RecordItem[]) => {\r\n  const mappedGames = games.map(game => {\r\n    const filteredGames = records.filter(item => {\r\n      return item.gameTitle === game.title && item.gamePlatform === game.platform\r\n    });\r\n\r\n    return {\r\n      x: `${game.title} | ${game.platform}`,\r\n      y: filteredGames.length\r\n    }\r\n    \r\n  });\r\n\r\n  const sortedGames = mappedGames.sort((a, b) => {\r\n    return b.y - a.y;\r\n  });\r\n\r\n  return sortedGames.slice(0, 8);\r\n};\r\n\r\nexport const getPlatformChartData = (records: RecordItem[]) => {\r\n  const platforms = [\"PC\", \"PLAYSTATION\", \"XBOX\"];\r\n\r\n  const series = platforms.map(platform => {\r\n    const filtedGames = records.filter(item => {\r\n      return platform === item.gamePlatform;\r\n    })\r\n\r\n    return filtedGames.length;\r\n  });\r\n\r\n  return {\r\n    labels: platforms,\r\n    series,\r\n  };\r\n};\r\n\r\nexport const getGenderChartData = (records: RecordItem[]) => {\r\n   const genderByAmount = records.reduce((accumulator, currentValue) => {\r\n     if (accumulator[currentValue.genreName] !== undefined) {\r\n       accumulator[currentValue.genreName] += 1;\r\n     } else {\r\n      accumulator[currentValue.genreName] = 1;\r\n     }\r\n\r\n     return accumulator;\r\n   }, {} as Record<string, number>);\r\n\r\n   const labels = Object.keys(genderByAmount);\r\n   const series = Object.values(genderByAmount);\r\n\r\n  return {\r\n    labels,\r\n    series\r\n  };\r\n};"]},"metadata":{},"sourceType":"module"}